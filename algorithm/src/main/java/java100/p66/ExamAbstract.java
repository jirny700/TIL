package java100.p66;

//추상 클래스와 추상 메서드란 무엇인지 설명하고 관련된 예제 코드를 구현해보시오.
//이 문제는 자바의 추상 메서드의 개념과 역할에 대해서알고 있는지를 묻는 문제이다.
abstract class Animal {
    //구체적인 내용은 작성하지 않고 공통적인 특징을 추상적으로 선언-->리턴값 조차도 없이 메서드명만 선언.
    abstract void cry();
}

class Dog extends Animal {
    void cry() {
        System.out.println("멍멍");
    }
}

class Cat extends Animal {
    void cry() {
        System.out.println("야옹");
    }
}
class Cow extends Animal {
    void cry() {
        System.out.println("음메");
    }
}

    class Animal2 {
        void fly() {
            System.out.println("날다");
        }
    }

    public class ExamAbstract {
        public static void main(String[] args) {
            //[1]추상 클래스는 구체적인 내용이 없이 떄문에 객체를 생성할 수 없다.
            //Animal dog = new Animal(); //에러가 남
            Animal2 dragonfly = new Animal2(); //에러가 안남.
            dragonfly.fly();

            //[2]추상 클래스 사용은? -->상속을 받아서 사용.
            //즉, 추상(부모) 클래스를 상속받은 자식 클래스에서 해당 메서드를 오버라이딩하여 재정의한 후 사용한다.
            Dog dog = new Dog();
            dog.cry();//멍멍

            Cat cat = new Cat();
            cat.cry();//야옹

            //[3]요약:
            //추상(부모) 클래스는 다른(자식) 클래스들의 공통적인 특징을 변수나 메서드로 정의만 해놓는 것을 말한다-->추상메서드
            //abstract를 앞에 붙이고 클래스 안에 추상 메서드를 포함하고 있다는 것을 제외하면 사실 일반 클래스와 별반 차이가 없.
            //필드,생성자,메서드(추상메서드 말고 일반메서드는 사용가능)도 포함할 수 있다.
            //메서드 선언만 있고 구체적인 내용은 없으므로 객체를 생성할 수 없다.
            //따라서, 부모 클래스로서의 역할은 하지만, 구체적인 사용은 상속받은 자식 클래스에서 재정의(오버라이딩)하여 사용해야 한다-->>강제성
            //추상 클래스에서 선언만 해놓음으로써 이후 새로운 자식클래스들이 이를 상속받아 구현하므로 새로운 클래스를 작성할떄 하나의 틀이된다.

            //[4]왜 사용할까?
            //우선 강제하기 위함이다.
            //부모(추상)클래스가 선언해놓은 메서드를 상속받은 자식 클래스들이 이를 그대로 재정의해서 구현하라고 강제하는 것이다.
            //상속받은 자식 클래스 입장에서는 자칫 상속만 받고 재정의해서 사용을 안할 수도 있기 떄문이다.
            //즉, 일반메서드로 구현하면 누군가는 해당 메서드를 구현 안할 수도 있다.
            //자식 클래스는 무조건 추상메서드를 재정의해서 구현해야만 한다.
            //만약 위의 Cat클래스에서 재정의한 cry()메서드를 지우면 에러가 난다.-->재정의하지 않았기 떄문이다.

            //[5]꼭 재정의 해야만 하는가?
            //일단은 그렇다.

            //[6]결론
            //추상(부모)클래스에서 구현을 하지 않는 이유는 해당 메서드의 구현이 상속받는 클래스에 따라서 달라질 수 있기 때문이다.
            //마치 돈 많은 부모가 엄청난 대지만 상속해주고 용도는 자식들이 알아서 사용하라고 하는 느낌으로 이해하기.
            //따라서 여러명의 개발자가 작업할때 코드의 확장과 분업을 효율적으로 처리할 수 있게 해준다.
            //분업화된 시스템에서 공통의 프로젝트를 진행할 떄 많이 쓰이는 중요문법이다.

        }
    }

