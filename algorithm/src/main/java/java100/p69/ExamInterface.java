package java100.p69;
//자바의 인터페이스에 대해서 설명하기

//[1]인터페이스란 무엇인가?
//사전적 의미->결합부, 접속기-->사용자간 또는 컴퓨터간 통신이 가능하도록 해주는 디바이스나 프로그램
//큰 틀에서 본다면 자바에서의 인터페이스 개념도 사전적 의미와 비슷하다.
//상호간 통신을 위해서는 "규격"이 중요하다. Ex)110v, 220v
//규격을 인터페이스라고 할 수 있고, 인터페이스는 하나의 "표준화"를 제공하는 것이라 할 수 있다.

//[2]추상클래스 vs 인터페이스
//거의 비슷하다->그러나 인터페이스가 추상화정도가 더 높다(더 엄격함)->일반메서드나 필드를 인터페이스 안에서는 사용할 수 없다.

//[3]자바에서의 인터페이스 문법?
//표준화 및 규격을 인터페이스로 제공.
//따라서 어떤 클래스가 해당 인터페이스를 상속한다면 인터페이스에 선언되어져 있는 메서드를 구현해야 한다.
//인터페이스는 class키워드를 사용하지 않고, 별도의 interface키워드를 사용한다.
//class->extends, interface->implements
//추상 클래스와 같이 메서드의 구체적인 내용은 기술되어 있지 않으므로 자식 클래스에서 오버라이딩하여 사용해야 한다.

//[4]상속 vs 구현
//클래스와 인터페이스의 차이점 중 하나는 상속이다.
//클래스는 단일 상속만 가능하지만, 인터페이스는 다중상속이 가능하다.
//그러나 인터페이스는 상속이라는 표현을 쓰지 않고, 구현의 의미를 강조하는  implements 키워드를 사용하여 다중상속을 구현한다.

//[5]장점
//인터페이스를 이용하면 메서드의 추상적인 "선언"과 그 메서드들을 구체적으로 "구현"하는 것을 분리시킬 수 있다.
//하청을 주는 대기업은 하청업체에 인터페이스만 제공->각 하청업체들이 이를 준수하여(상속받아) 개발.

//[6]우선순위
//상속을 받는 extends키워드와 implements가 동시에 쓰일때 extends가 항상 우선이다.
//ex. class Student extends Person implements A,B

public class ExamInterface {
    public static void main(String[] args) {
        //[1]객체생성
    }
}
